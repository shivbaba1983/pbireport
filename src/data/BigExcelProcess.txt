import React, { useState } from 'react';
import * as XLSX from 'xlsx';
import axios from 'axios';
import './ExcelUploader.scss';

const ExcelUploader: React.FC = () => {
  const [fileName, setFileName] = useState('');
  const [progress, setProgress] = useState(0);
  const [message, setMessage] = useState('');
  const [isUploading, setIsUploading] = useState(false);

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setFileName(file.name);
    setProgress(0);
    setMessage('');
    setIsUploading(true);

    try {
      // Step 1: Read Excel file
      const data = await file.arrayBuffer();
      const workbook = XLSX.read(data);
      const worksheet = workbook.Sheets[workbook.SheetNames[0]];
      const jsonData: any[] = XLSX.utils.sheet_to_json(worksheet, { defval: '' });

      // Step 2: Validate data
      const validData = [];
      const invalidData = [];
      for (let i = 0; i < jsonData.length; i++) {
        const row = jsonData[i];
        const isValid =
          row['Name'] &&
          row['Email'] &&
          /^\S+@\S+\.\S+$/.test(row['Email']) &&
          !isNaN(row['Age']);
        if (isValid) validData.push(row);
        else invalidData.push({ rowNumber: i + 2, ...row }); // +2 accounts for header row
      }

      if (invalidData.length > 0) {
        console.warn('Invalid rows found:', invalidData);
      }

      // Step 3: Send data in batches (e.g. 1000 records per API call)
      const batchSize = 1000;
      for (let i = 0; i < validData.length; i += batchSize) {
        const batch = validData.slice(i, i + batchSize);
        const percent = Math.round(((i + batch.length) / validData.length) * 100);
        setProgress(percent);

        await axios.post('/api/uploadExcelData', batch, {
          headers: { 'Content-Type': 'application/json' },
        });
      }

      setMessage(`Upload completed! ✅ ${validData.length} valid rows uploaded.`);
    } catch (error) {
      console.error('Error processing file:', error);
      setMessage('❌ Error processing file. Check console for details.');
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div className="excel-uploader">
      <h2>Excel File Upload</h2>
      <input
        type="file"
        accept=".xlsx, .xls"
        onChange={handleFileUpload}
        disabled={isUploading}
      />
      {fileName && <p>File: {fileName}</p>}

      {isUploading && (
        <div className="progress-container">
          <div className="progress-bar" style={{ width: `${progress}%` }}></div>
          <p>{progress}% Processing...</p>
        </div>
      )}

      {message && <p className="status">{message}</p>}
    </div>
  );
};

export default ExcelUploader;


.excel-uploader {
  max-width: 600px;
  margin: 20px auto;
  text-align: center;
  background: #f8f9fa;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);

  input[type='file'] {
    margin-top: 10px;
  }

  .progress-container {
    margin: 20px 0;
    background: #e9ecef;
    border-radius: 8px;
    overflow: hidden;
    height: 24px;
    position: relative;
  }

  .progress-bar {
    background: #007bff;
    height: 100%;
    transition: width 0.3s ease;
  }

  .status {
    margin-top: 10px;
    font-weight: bold;
  }
}


app.post('/api/uploadExcelData', async (req, res) => {
  try {
    const data = req.body; // array of records
    console.log(`Received batch of ${data.length} records`);
    // TODO: Add DB insert logic here
    res.json({ status: 'ok', count: data.length });
  } catch (err) {
    console.error('Upload error:', err);
    res.status(500).json({ error: 'Failed to save data' });
  }
});




using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;

namespace ExcelUploaderApi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class UploadController : ControllerBase
    {
        // POST: api/upload
        [HttpPost]
        [Route("uploadExcelData")]
        public IActionResult UploadExcelData([FromBody] List<ExcelRecord> records)
        {
            if (records == null || records.Count == 0)
            {
                return BadRequest(new { message = "No records found in upload." });
            }

            var validRecords = new List<ExcelRecord>();
            var invalidRecords = new List<object>();

            foreach (var record in records)
            {
                if (IsValidRecord(record))
                {
                    validRecords.Add(record);
                }
                else
                {
                    invalidRecords.Add(new
                    {
                        record,
                        error = "Invalid or missing fields"
                    });
                }
            }

            // 🔹 Simulate saving valid records to a database or storage
            Console.WriteLine($"✅ Received batch: {records.Count} records, {validRecords.Count} valid.");

            // You can replace this with your DB save logic
            // await _dbContext.AddRangeAsync(validRecords);
            // await _dbContext.SaveChangesAsync();

            return Ok(new
            {
                message = "Batch processed successfully.",
                total = records.Count,
                valid = validRecords.Count,
                invalid = invalidRecords.Count
            });
        }

        private bool IsValidRecord(ExcelRecord record)
        {
            if (string.IsNullOrWhiteSpace(record.Name) ||
                string.IsNullOrWhiteSpace(record.Email) ||
                !record.Email.Contains("@") ||
                record.Age <= 0)
                return false;

            return true;
        }
    }

    // Model that matches the Excel JSON structure
    public class ExcelRecord
    {
        [Required]
        public string Name { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public int Age { get; set; }
    }
}


Example Program.cs (minimal API setup)

Make sure your backend accepts JSON from the React frontend:


using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);

// Add CORS policy for React app
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowReactApp", policy =>
    {
        policy.WithOrigins("http://localhost:3000") // Update with your React app URL
              .AllowAnyHeader()
              .AllowAnyMethod();
    });
});

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

app.UseCors("AllowReactApp");
app.UseAuthorization();
app.MapControllers();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.Run();


Frontend (React) configuration change

In your axios.post call inside ExcelUploader.tsx, make sure to call:
await axios.post('https://localhost:5001/api/upload/uploadExcelData', batch, {
  headers: { 'Content-Type': 'application/json' },
});