Got it üëç You want your PowerBIEmbed component managed with Redux state instead of useState.
Here‚Äôs a clean setup for React + Redux Toolkit + SCSS:

1Ô∏è‚É£ Redux Slice (powerbiSlice.ts)
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface Report {
  id: string;
  name: string;
}

interface PowerBIState {
  reports: Report[];
  selectedReport: string;
}

const initialState: PowerBIState = {
  reports: [
    { id: "report1", name: "Sales Report" },
    { id: "report2", name: "Finance Report" },
    { id: "report3", name: "HR Report" },
  ],
  selectedReport: "",
};

const powerbiSlice = createSlice({
  name: "powerbi",
  initialState,
  reducers: {
    setSelectedReport(state, action: PayloadAction<string>) {
      state.selectedReport = action.payload;
    },
  },
});

export const { setSelectedReport } = powerbiSlice.actions;
export default powerbiSlice.reducer;
===========================================================================================
2Ô∏è‚É£ Store Setup (store.ts)
import { configureStore } from "@reduxjs/toolkit";
import powerbiReducer from "./powerbiSlice";

export const store = configureStore({
  reducer: {
    powerbi: powerbiReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
===========================================================================================
3Ô∏è‚É£ PowerBIEmbed Component (PowerBIEmbed.tsx)
import React, { useRef } from "react";
import { useDispatch, useSelector } from "react-redux";
import { RootState, AppDispatch } from "./store";
import { setSelectedReport } from "./powerbiSlice";
import "./PowerBIEmbed.scss";

const PowerBIEmbed: React.FC = () => {
  const dispatch: AppDispatch = useDispatch();
  const { reports, selectedReport } = useSelector((state: RootState) => state.powerbi);

  const reportRef = useRef<HTMLDivElement>(null);

  const loadReport = (reportId: string) => {
    if (reportRef.current) {
      reportRef.current.innerHTML = `<div class="mock-viewer">Loaded ${reportId}</div>`;
    }
  };

  return (
    <div className="powerbi-embed-container">
      <select
        value={selectedReport}
        onChange={(e) => {
          dispatch(setSelectedReport(e.target.value));
          loadReport(e.target.value);
        }}
      >
        <option value="">-- Select Report --</option>
        {reports.map((r) => (
          <option key={r.id} value={r.id}>
            {r.name}
          </option>
        ))}
      </select>

      <div ref={reportRef} className="report-frame">
        {!selectedReport && (
          <div className="mock-viewer">Please select a report</div>
        )}
      </div>
    </div>
  );
};

export default PowerBIEmbed;
===========================================================================================
4Ô∏è‚É£ App Entry (index.tsx)
import React from "react";
import ReactDOM from "react-dom/client";
import { Provider } from "react-redux";
import { store } from "./store";
import PowerBIEmbed from "./PowerBIEmbed";

const root = ReactDOM.createRoot(document.getElementById("root")!);
root.render(
  <Provider store={store}>
    <PowerBIEmbed />
  </Provider>
);

5Ô∏è‚É£ SCSS (PowerBIEmbed.scss)
.powerbi-embed-container {
  display: flex;
  flex-direction: column;
  gap: 16px;
  width: 100%;
  height: 100%;
  padding: 20px;
  box-sizing: border-box;

  select {
    width: 280px;
    padding: 8px 12px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 6px;
    background-color: #fff;
    transition: border-color 0.2s;

    &:hover {
      border-color: #888;
    }

    &:focus {
      border-color: #0078d4; // Power BI blue
      outline: none;
    }
  }

  .report-frame {
    flex: 1;
    min-height: 600px;
    width: 100%;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    background: #f9f9f9;

    iframe {
      width: 100%;
      height: 100%;
      border: none;
    }

    .mock-viewer {
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      font-weight: 500;
      color: #555;
      background: repeating-linear-gradient(
        45deg,
        #f5f5f5,
        #f5f5f5 10px,
        #ececec 10px,
        #ececec 20px
      );
    }
  }
}
===========================================================================================

‚úÖ Now your reports list & selected report are Redux-managed, not local state.
You can later plug in API-fetched reports by dispatching actions.

Would you like me to also add async thunk in Redux slice so reports can be fetched from S3/REST API instead of being hardcoded?